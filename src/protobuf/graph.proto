// -*- mode: c++; indent-tabs-mode: nil; -*-
//
// Copyright (c) 2017 Illumina, Inc.
// All rights reserved.

// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:

// 1. Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.

// 2. Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.

// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package graphs;

message GraphHeader {
    // Each node is tagged with a set of sequences
    repeated string sequencenames = 1;

    // graph meta-information
    repeated KeyValue meta = 5;
}

message ReferencePosition
{
    string chrom = 1;
    uint64 pos = 2;
    uint64 end = 3;
}

// nodes store sequences
message Node {
    uint64 id = 1;          // unique id of the node
    string name = 2;
    string sequence = 3;
    repeated uint64 sequence_ids = 4;
    // unspecified / metainformation
    repeated KeyValue meta = 5;

    repeated ReferencePosition reference_pos = 7;
}

// Edges tell us that the piece of DNA in one node has been observed
// *directly* after another one. Traversing an edge from n1 to n2 gives
// the concatenated sequence of n1, n2
message Edge {
    uint64 from = 1;  // ID of upstream node
    uint64 to   = 2;  // ID of downstream node
    repeated uint64 sequence_ids = 4;

    repeated KeyValue meta = 5;
}

// Key / value metainformation storage
message KeyValue {
    string key = 1;

    oneof value {
        string s_value = 2;
        int64 i_value = 3;
        double f_value = 4;
    }
}

// this is so we can store our graph in any order
message NodeOrEdge {
    oneof ne {
        Node node = 1;
        Edge edge = 2;
    }
}
